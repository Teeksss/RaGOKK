# Last reviewed: 2025-04-29 13:14:42 UTC (User: TeeksssAPI)
name: RAG Base CI/CD

on:
  push:
    branches: [ main, develop ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  BACKEND_IMAGE_NAME: ${{ github.repository }}/backend
  FRONTEND_IMAGE_NAME: ${{ github.repository }}/frontend
  KUBECONFIG_FILE: ${{ secrets.KUBECONFIG }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run backend tests
        working-directory: ./backend
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          TEST_MODE: true
        run: |
          pytest tests/ --cov=. --cov-report=xml --cov-report=term --cov-branch

      - name: Check test coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          fail_ci_if_error: true
          verbose: true

      - name: Generate coverage report
        working-directory: ./backend
        run: |
          python -m pytest --cov=. --cov-report=html:coverage_html

      - name: Archive code coverage results
        uses: actions/upload-artifact@v3
        with:
          name: code-coverage-report
          path: ./backend/coverage_html
          retention-days: 7

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: |
          npm run test:ci
          
      - name: Upload frontend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend

  lint:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy

      - name: Run Flake8
        run: |
          flake8 backend/ --count --select=E9,F63,F7,F82 --show-source --statistics

      - name: Check formatting with Black
        run: |
          black --check backend/

      - name: Check imports with isort
        run: |
          isort --check-only --profile black backend/

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Install frontend linting dependencies
        working-directory: ./frontend
        run: |
          npm ci
          
      - name: Run ESLint
        working-directory: ./frontend
        run: |
          npm run lint

  build:
    name: Build Images
    needs: [test, lint]
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')) ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for backend
        id: meta-backend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push backend image
        uses: docker/build-push-action@v3
        with:
          context: ./backend
          push: true
          tags: ${{ steps.meta-backend.outputs.tags }}
          labels: ${{ steps.meta-backend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Extract metadata for frontend
        id: meta-frontend
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}
          tags: |
            type=semver,pattern={{version}}
            type=ref,event=branch
            type=sha,format=short

      - name: Build and push frontend image
        uses: docker/build-push-action@v3
        with:
          context: ./frontend
          push: true
          tags: ${{ steps.meta-frontend.outputs.tags }}
          labels: ${{ steps.meta-frontend.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Kubernetes
    needs: build
    runs-on: ubuntu-latest
    if: |
      (github.event_name == 'push' && github.ref == 'refs/heads/main') ||
      startsWith(github.ref, 'refs/tags/v')

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.26.0'

      - name: Set environment
        id: set-env
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            echo "DEPLOY_ENV=production" >> $GITHUB_ENV
            echo "ENV_SUFFIX=prod" >> $GITHUB_ENV
          elif [[ $GITHUB_REF == refs/heads/main ]]; then
            echo "DEPLOY_ENV=staging" >> $GITHUB_ENV
            echo "ENV_SUFFIX=staging" >> $GITHUB_ENV
          else
            echo "DEPLOY_ENV=dev" >> $GITHUB_ENV
            echo "ENV_SUFFIX=dev" >> $GITHUB_ENV
          fi
          echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Setup Kubernetes config
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Update deployment manifests
        run: |
          cd k8s/${{ env.DEPLOY_ENV }}
          
          # Update backend image tag
          sed -i "s|image:.*backend:.*|image: ${{ env.REGISTRY }}/${{ env.BACKEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}|" backend-deployment.yaml
          
          # Update frontend image tag
          sed -i "s|image:.*frontend:.*|image: ${{ env.REGISTRY }}/${{ env.FRONTEND_IMAGE_NAME }}:${{ env.IMAGE_TAG }}|" frontend-deployment.yaml

      - name: Deploy to Kubernetes
        run: |
          cd k8s/${{ env.DEPLOY_ENV }}
          kubectl apply -f namespace.yaml
          kubectl apply -f configmap.yaml
          kubectl apply -f secret.yaml
          kubectl apply -f redis-statefulset.yaml
          kubectl apply -f postgres-statefulset.yaml
          kubectl apply -f backend-deployment.yaml
          kubectl apply -f frontend-deployment.yaml
          kubectl apply -f ingress.yaml

      - name: Verify deployment
        run: |
          kubectl rollout status deployment/backend -n rag-base-${{ env.ENV_SUFFIX }}
          kubectl rollout status deployment/frontend -n rag-base-${{ env.ENV_SUFFIX }}

      - name: Send deployment notification
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_COLOR: good
          SLACK_MESSAGE: 'RAG Base successfully deployed to ${{ env.DEPLOY_ENV }} environment :rocket:'
          SLACK_TITLE: Deployment Success